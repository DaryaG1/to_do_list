{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","useState","title","setTitle","error","setError","addTask","trim","todolistID","onClick","removeTodolist","value","onChange","e","currentTarget","onKeyPress","charCode","className","tasks","map","t","key","id","isDone","type","changeTaskStatus","checked","removeTask","filter","changeFilter","App","todolistID1","v1","todolistID2","todolist","setTodolist","setTasks","el","task","changeStatus","taskId","tdl","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a69490ec.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType} from './App';\r\n\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    todolistID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (todolistID: string, taskId: string) => void\r\n    changeFilter: (todolistID: string, value: FilterValuesType) => void\r\n    addTask: (todolistID: string, title: string) => void\r\n    changeTaskStatus: (todolistID: string, taskId: string, isDone: boolean) => void\r\n    filter: FilterValuesType\r\n    removeTodolist:(todolistID: string)=>void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addTask(props.todolistID, title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(props.todolistID, \"all\");\r\n    const onActiveClickHandler = () => props.changeFilter(props.todolistID, \"active\");\r\n    const onCompletedClickHandler = () => props.changeFilter(props.todolistID, \"completed\");\r\nconst onClickHandler =()=>{\r\n    props.removeTodolist(props.todolistID)\r\n}\r\n\r\n    return <div>\r\n        <h3>{props.title}\r\n            <button onClick={onClickHandler}>X</button>\r\n        </h3>\r\n        <div>\r\n            <input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={addTask}>+</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(props.todolistID, t.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeTaskStatus(props.todolistID, t.id, e.currentTarget.checked);\r\n                    }\r\n\r\n                    return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <input type=\"checkbox\"\r\n                               onChange={onChangeHandler}\r\n                               checked={t.isDone}/>\r\n                        <span>{t.title}</span>\r\n                        <button onClick={onClickHandler}>x</button>\r\n                    </li>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <button className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </button>\r\n            <button className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </button>\r\n            <button className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype todolistType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n    let todolistID1 = v1()\r\n    let todolistID2 = v1()\r\n    let [todolist, setTodolist] = useState<Array<todolistType>>([\r\n        {id: todolistID1, title: \"What to learn:\", filter: 'all'},\r\n        {id: todolistID2, title: \"What to bye:\", filter: 'all'},\r\n    ])\r\n    let [tasks, setTasks] = useState({\r\n        [todolistID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false}\r\n        ],\r\n        [todolistID2]: [\r\n            {id: v1(), title: \"book\", isDone: true},\r\n            {id: v1(), title: \"computer\", isDone: true},\r\n            {id: v1(), title: \"games\", isDone: false},\r\n        ]\r\n    })\r\n\r\n\r\n\r\n    function removeTask(todolistID:string,id: string) {\r\n        setTasks({...tasks,[todolistID]:tasks[todolistID].filter(el => el.id !== id)});\r\n    }\r\n\r\n    function addTask(todolistID:string,title: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        setTasks({...tasks,[todolistID]:[task,...tasks[todolistID]]})\r\n    }\r\n\r\n    function changeStatus(todolistID:string,taskId: string, isDone: boolean) {\r\n        setTasks({...tasks,[todolistID]:tasks[todolistID].map(el=>el.id===taskId?{...el,isDone:isDone}:el)})\r\n    }\r\n\r\n\r\n    function changeFilter(todolistID: string, value: FilterValuesType) {\r\n        setTodolist(todolist.map(tdl => tdl.id === todolistID ? {...tdl, filter: value} : tdl))\r\n    }\r\nconst removeTodolist=(todolistID:string)=>{\r\n        delete tasks[todolistID]\r\nsetTodolist(todolist.filter(el=>el.id!==todolistID))\r\n}\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todolist.map((el) => {\r\n                let tasksForTodolist = tasks[el.id];\r\n\r\n                if (el.filter === \"active\") {\r\n                    tasksForTodolist = tasks[el.id].filter(t => t.isDone === false);\r\n                }\r\n                if (el.filter === \"completed\") {\r\n                    tasksForTodolist = tasks[el.id].filter(t => t.isDone === true);\r\n                }\r\n                return (\r\n\r\n                    <Todolist key={el.id}\r\n                              todolistID={el.id}\r\n                              title={el.title}\r\n                              tasks={tasksForTodolist}\r\n                              removeTask={removeTask}\r\n                              changeFilter={changeFilter}\r\n                              addTask={addTask}\r\n                              changeTaskStatus={changeStatus}\r\n                              filter={el.filter}\r\n                              removeTodolist={removeTodolist}\r\n\r\n                    />\r\n                )\r\n            })}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}